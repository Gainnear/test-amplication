/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Plant } from "./Plant";
import { PlantCountArgs } from "./PlantCountArgs";
import { PlantFindManyArgs } from "./PlantFindManyArgs";
import { PlantFindUniqueArgs } from "./PlantFindUniqueArgs";
import { CreatePlantArgs } from "./CreatePlantArgs";
import { UpdatePlantArgs } from "./UpdatePlantArgs";
import { DeletePlantArgs } from "./DeletePlantArgs";
import { DeviceFindManyArgs } from "../../device/base/DeviceFindManyArgs";
import { Device } from "../../device/base/Device";
import { PlantService } from "../plant.service";
@graphql.Resolver(() => Plant)
export class PlantResolverBase {
  constructor(protected readonly service: PlantService) {}

  async _plantsMeta(
    @graphql.Args() args: PlantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Plant])
  async plants(@graphql.Args() args: PlantFindManyArgs): Promise<Plant[]> {
    return this.service.plants(args);
  }

  @graphql.Query(() => Plant, { nullable: true })
  async plant(
    @graphql.Args() args: PlantFindUniqueArgs
  ): Promise<Plant | null> {
    const result = await this.service.plant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Plant)
  async createPlant(@graphql.Args() args: CreatePlantArgs): Promise<Plant> {
    return await this.service.createPlant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Plant)
  async updatePlant(
    @graphql.Args() args: UpdatePlantArgs
  ): Promise<Plant | null> {
    try {
      return await this.service.updatePlant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Plant)
  async deletePlant(
    @graphql.Args() args: DeletePlantArgs
  ): Promise<Plant | null> {
    try {
      return await this.service.deletePlant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Device], { name: "devices" })
  async findDevices(
    @graphql.Parent() parent: Plant,
    @graphql.Args() args: DeviceFindManyArgs
  ): Promise<Device[]> {
    const results = await this.service.findDevices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
